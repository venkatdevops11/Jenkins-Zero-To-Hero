pipeline {
    agent {
	   label 'docker' 
	      }
	environment {
	   REPONAME = "yvr522/lms"
	   DOCKERHUB_CRED = credentials('dock_cred')
        
                }
    stages {
       stage('Building the code') {
	steps {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn test && mvn clean package'
              }
          }
      stage('Static Code Analysis') {
          steps {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && sudo docker container run --rm --name sonarscanner -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=sonar-demo" -e SONAR_HOST_URL="http://104.198.230.37:9000" -e SONAR_TOKEN="sqp_97a2964eb341c0c255c354228c8bb23161f94ed7" -v ".:/usr/src" sonarsource/sonar-scanner-cli'
	        }
	}
      
      stage('Creating Docker image') {
         steps {
           sh 'sudo docker rmi --force $REPONAME:${BUILD_NUMBER}'
           sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && sudo docker build -t $REPONAME:${BUILD_NUMBER} .'
               }
          }
       stage('Authenticating with Dockerhub') {
         steps {
           sh 'echo $DOCKERHUB_CRED_PSW | sudo docker login -u $DOCKERHUB_CRED_USR --password-stdin'
               }
            }				  
       stage('Pushing the docker image') {
         steps {
           sh 'sudo docker push $REPONAME:${BUILD_NUMBER}'
	       }
	  }
       stage('Launching the container') {
         steps {
           sh 'sudo docker container rm --force spring-be'
           sh 'sudo docker run -d -p 8010:8080 --name spring-be $REPONAME:${BUILD_NUMBER}'
	       }
          }
     }
 }
